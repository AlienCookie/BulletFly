#version 400 core

layout(location = 0) in vec4 a_position;
layout(location = 1) in vec2 a_texCoord;
layout(location = 2) in vec3 vertexNormal;

out vec4 p_color;
out vec2 p_texCoord;

// ----- Constants field -----
const float cfZero = 0.0;
const float cfOne = 1.0;

//--------------------------

uniform mat4 u_mvMatrix;
uniform mat4 u_pMatrix;

struct directLight
{
    vec3 direction;
    vec3 halfplane;

    vec4 specularColor;
    vec4 diffuseColor;
    vec4 ambientColor;
} light;

struct materialProperties
{
    vec4 specularColor;
    vec4 diffuseColor;
    vec4 ambientColor;

    float specularExponent;
} material;

//uniform materialProperties material;
//uniform directLight light;


vec4 directionLightColor(vec3 normal)
{
    light = directLight(vec3(0.0, 1.0, 0.0),
                        vec3(0.0, 1.0, 0.0),
                        vec4(0.9, 0.9, 0.9, 1.0),
                        vec4(0.8, 0.8, 0.8, 1.0),
                        vec4(0.6, 0.6, 0.6, 1.0));

    material = materialProperties(vec4(0.7, 0.7, 0.7, 1.0),
                                  vec4(0.7, 0.7, 0.7, 1.0),
                                  vec4(0.6, 0.6, 0.6, 1.0),
                                  8.0);




	vec4 computedColor = vec4(cfZero, cfZero, cfZero, cfZero);

	float ndotl; // dot production of normal & light direction
	float ndoth; // dot production of normal & half-plane vector

	ndotl = max(cfZero, dot (normal, light.direction));
	ndoth = max(cfZero, dot (normal, light.halfplane));

	computedColor += (light.ambientColor * material.ambientColor);
	computedColor += (ndotl * light.diffuseColor * material.diffuseColor);

	if (ndoth > cfZero)
	{
		computedColor += (pow (ndoth, material.specularExponent) *
							material.specularColor * light.specularColor);
	}

	return computedColor;
}


void main()
{
    mat4 mvp = u_mvMatrix * u_pMatrix;
    gl_Position = mvp * a_position;
	vec4 norm =  vec4(vertexNormal.xyz, 1.0f); //mvp *

	p_color = directionLightColor(normalize(vec3(norm.xyz)));
	p_texCoord = a_texCoord;
}